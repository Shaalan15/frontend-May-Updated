{"ast":null,"code":"import * as React from 'react';\nimport useLayoutEffect from '@react-hook/passive-layout-effect';\n/**\n * A hook for measuring the width of the grid container, as well as its distance\n * from the top of the document. These values are necessary to correctly calculate the number/width\n * of columns to render, as well as the number of rows to render.\n *\n * @param elementRef A `ref` object created by `React.useRef()`. That ref should be provided to the\n *   `containerRef` property in `useMasonry()`.\n * @param deps You can force this hook to recalculate the `offset` and `width` whenever this\n *   dependencies list changes. A common dependencies list might look like `[windowWidth, windowHeight]`,\n *   which would force the hook to recalculate any time the size of the browser `window` changed.\n */\n\nexport function useContainerPosition(elementRef, deps = emptyArr) {\n  const [containerPosition, setContainerPosition] = React.useState({\n    offset: 0,\n    width: 0\n  });\n  useLayoutEffect(() => {\n    const {\n      current\n    } = elementRef;\n\n    if (current !== null) {\n      let offset = 0;\n      let el = current;\n\n      do {\n        offset += el.offsetTop || 0;\n        el = el.offsetParent;\n      } while (el);\n\n      if (offset !== containerPosition.offset || current.offsetWidth !== containerPosition.width) {\n        setContainerPosition({\n          offset,\n          width: current.offsetWidth\n        });\n      }\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, deps);\n  return containerPosition;\n}\nconst emptyArr = [];","map":{"version":3,"sources":["D:/Users/abdel/Documents/Safe/Code/Bootcamp/frontest/node_modules/masonic/dist/module/use-container-position.js"],"names":["React","useLayoutEffect","useContainerPosition","elementRef","deps","emptyArr","containerPosition","setContainerPosition","useState","offset","width","current","el","offsetTop","offsetParent","offsetWidth"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,eAAP,MAA4B,mCAA5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,oBAAT,CAA8BC,UAA9B,EAA0CC,IAAI,GAAGC,QAAjD,EAA2D;AAChE,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4CP,KAAK,CAACQ,QAAN,CAAe;AAC/DC,IAAAA,MAAM,EAAE,CADuD;AAE/DC,IAAAA,KAAK,EAAE;AAFwD,GAAf,CAAlD;AAIAT,EAAAA,eAAe,CAAC,MAAM;AACpB,UAAM;AACJU,MAAAA;AADI,QAEFR,UAFJ;;AAIA,QAAIQ,OAAO,KAAK,IAAhB,EAAsB;AACpB,UAAIF,MAAM,GAAG,CAAb;AACA,UAAIG,EAAE,GAAGD,OAAT;;AAEA,SAAG;AACDF,QAAAA,MAAM,IAAIG,EAAE,CAACC,SAAH,IAAgB,CAA1B;AACAD,QAAAA,EAAE,GAAGA,EAAE,CAACE,YAAR;AACD,OAHD,QAGSF,EAHT;;AAKA,UAAIH,MAAM,KAAKH,iBAAiB,CAACG,MAA7B,IAAuCE,OAAO,CAACI,WAAR,KAAwBT,iBAAiB,CAACI,KAArF,EAA4F;AAC1FH,QAAAA,oBAAoB,CAAC;AACnBE,UAAAA,MADmB;AAEnBC,UAAAA,KAAK,EAAEC,OAAO,CAACI;AAFI,SAAD,CAApB;AAID;AACF,KApBmB,CAoBlB;;AAEH,GAtBc,EAsBZX,IAtBY,CAAf;AAuBA,SAAOE,iBAAP;AACD;AACD,MAAMD,QAAQ,GAAG,EAAjB","sourcesContent":["import * as React from 'react';\nimport useLayoutEffect from '@react-hook/passive-layout-effect';\n/**\n * A hook for measuring the width of the grid container, as well as its distance\n * from the top of the document. These values are necessary to correctly calculate the number/width\n * of columns to render, as well as the number of rows to render.\n *\n * @param elementRef A `ref` object created by `React.useRef()`. That ref should be provided to the\n *   `containerRef` property in `useMasonry()`.\n * @param deps You can force this hook to recalculate the `offset` and `width` whenever this\n *   dependencies list changes. A common dependencies list might look like `[windowWidth, windowHeight]`,\n *   which would force the hook to recalculate any time the size of the browser `window` changed.\n */\n\nexport function useContainerPosition(elementRef, deps = emptyArr) {\n  const [containerPosition, setContainerPosition] = React.useState({\n    offset: 0,\n    width: 0\n  });\n  useLayoutEffect(() => {\n    const {\n      current\n    } = elementRef;\n\n    if (current !== null) {\n      let offset = 0;\n      let el = current;\n\n      do {\n        offset += el.offsetTop || 0;\n        el = el.offsetParent;\n      } while (el);\n\n      if (offset !== containerPosition.offset || current.offsetWidth !== containerPosition.width) {\n        setContainerPosition({\n          offset,\n          width: current.offsetWidth\n        });\n      }\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, deps);\n  return containerPosition;\n}\nconst emptyArr = [];"]},"metadata":{},"sourceType":"module"}